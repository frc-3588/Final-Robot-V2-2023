// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryConfig;
import edu.wpi.first.math.trajectory.constraint.DifferentialDriveVoltageConstraint;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.commands.*;
import frc.robot.commands.Arm.ArmHome;
import frc.robot.commands.Arm.ArmTop;
import frc.robot.commands.Arm.ArmTop;
import frc.robot.commands.Elevator.ElevatorHome;
import frc.robot.commands.Elevator.ElevatorTop;
import frc.robot.subsystems.*;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
  // The robot's subsystems
  public final Arm m_arm = new Arm();
  public final Pneumatics m_acquisition = new Pneumatics();
  public final Elevator m_elevator = new Elevator();
  public final Chassis m_chassis = new Chassis();

  // Joysticks
  private final Joystick driver = new Joystick(0);
  private final Joystick operator = new Joystick(1);
  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Smartdashboard Subsystems

    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("Drive", new Drive(m_chassis));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND
    m_chassis.setDefaultCommand(new Drive(m_chassis));
    // new ArmHome(m_arm);
    // m_elevator.setDefaultCommand(new ElevatorHome(m_elevator));
    m_elevator.setDefaultCommand(new Earl(m_elevator));
    m_arm.setDefaultCommand(new Eric(m_arm));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    SmartDashboard.putData("Auto Mode", m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {

    // final JoystickButton elevatorTopButton = new JoystickButton(m_driverController,
    //     JoystickConstants.kElevatorTopButton);
    // elevatorTopButton.onTrue(new ElevatorTop(m_elevator));

    // final JoystickButton elevatorBottomButton = new JoystickButton(m_driverController,
    //     JoystickConstants.kElevatorBottomButton);
    // elevatorBottomButton.onTrue(new ElevatorHome(m_elevator));

    // final JoystickButton armTopButton = new JoystickButton(m_driverController, JoystickConstants.kArmTopButton);
    // armTopButton.onTrue(new ArmTop(m_arm));

    // final JoystickButton armBottomButton = new JoystickButton(m_driverController, JoystickConstants.kArmBottomButton);
    // armBottomButton.onTrue(new ArmHome(m_arm));

    // final JoystickButton scoreTopButton = new JoystickButton(m_driverController, JoystickConstants.kArmScoreTopButton);
    // scoreTopButton.onTrue(new ScoreTop(m_elevator, m_arm, m_acquisition));

    // final JoystickButton scoreMiddleButton = new JoystickButton(m_driverController,
    //     JoystickConstants.kArmScoreMiddleButton);
    // scoreMiddleButton.onTrue(new ScoreMiddle(m_elevator, m_arm, m_acquisition));

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS
    // Create some buttons

    final JoystickButton TogglePistonButton = new JoystickButton(operator, 2);
    TogglePistonButton.onTrue(new TogglePiston(m_acquisition));

    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=BUTTONS

    // final JoystickButton ArmTopButton = new JoystickButton(driver, 1);
    // ArmTopButton.onTrue(new ArmTop(m_arm));

    // final JoystickButton ArmBottomButton = new JoystickButton(driver, 2);
    // ArmBottomButton.onTrue(new ArmHome(m_arm));
  }

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
  public Joystick getDriver() {
    return driver;
  }


    public Joystick getOperator() {
      return operator;
  }

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  // public Command getAutonomousCommand() {
    // return null;
    //allow code to compile so we can test other things


    // The selected command will be run in autonomous

    //Reduces acceleration speed
    // var autoVoltageConstraint = new DifferentialDriveVoltageConstraint(
    //     new SimpleMotorFeedforward(
    //         DriveConstants.ksVolts,
    //         DriveConstants.kvVoltSecondsPerMeter,
    //         DriveConstants.kaVoltSecondsSquaredPerMeter),
    //     DriveConstants.m_kinematics,
    //     10);

    // // Create config for trajectory
    // TrajectoryConfig config =
    //     new TrajectoryConfig(
    //             AutoConstants.kMaxSpeedMetersPerSecond,
    //             AutoConstants.kMaxAccelerationMetersPerSecondSquared)
    //         // Add kinematics to ensure max speed is actually obeyed
    //         .setKinematics(DriveConstants.m_kinematics)
    //         // Apply the voltage constraint
    //         .addConstraint(autoVoltageConstraint);

    //         RamseteCommand ramseteCommand =
    //         new RamseteCommand(
    //             exampleTrajectory,
    //             m_robotDrive::getPose,
    //             new RamseteController(AutoConstants.kRamseteB, AutoConstants.kRamseteZeta),
    //             new SimpleMotorFeedforward(
    //                 DriveConstants.ksVolts,
    //                 DriveConstants.kvVoltSecondsPerMeter,
    //                 DriveConstants.kaVoltSecondsSquaredPerMeter),
    //             DriveConstants.m_kinematics,
    //             m_robotDrive::getWheelSpeeds,
    //             new PIDController(DriveConstants.kPDriveVel, 0, 0),
    //             new PIDController(DriveConstants.kPDriveVel, 0, 0),
    //             // RamseteCommand passes volts to the callback
    //             m_robotDrive::tankDriveVolts,
    //             m_robotDrive);
    
    //     // Reset odometry to the starting pose of the trajectory.
    //     m_robotDrive.resetOdometry(exampleTrajectory.getInitialPose());
  // }

}
