// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants.ElevatorConstants;
import frc.robot.commands.*;
import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.ControlType;

import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.CANSparkMax.IdleMode;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.SparkMaxLimitSwitch.Type;

import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Elevator extends SubsystemBase {

    private final CANSparkMax leftMotor;
    private final CANSparkMax rightMotor;
    private final MotorControllerGroup MotorControllerGroup;

    private SparkMaxPIDController leftPIDController;
    private SparkMaxPIDController rightPIDController;

    private final double kP = 5e-5;
    private final double kI = 1e-6;
    private final double kD = 0;
    private final double kIz = 0;
    private final double kFF = 0.000156;
    private final double kMaxOutput = 1;
    private final double kMinOutput = -1;
    private final int kMaxRPM = 5700;

    private RelativeEncoder leftEncoder;
    private RelativeEncoder rightEncoder;

    private double height = 0.0d;
    private double elevatorMaxHeight = 0.0d;
    private double setPoint; 

    private SparkMaxLimitSwitch reversedLimitSwitch;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Elevator() {

        leftMotor = new CANSparkMax(5, MotorType.kBrushless);
        rightMotor = new CANSparkMax(6, MotorType.kBrushless);
        MotorControllerGroup = new MotorControllerGroup(leftMotor, rightMotor);

        leftPIDController = leftMotor.getPIDController();
        rightPIDController = rightMotor.getPIDController();
        

        leftEncoder = leftMotor.getEncoder();
        rightEncoder = rightMotor.getEncoder();

        leftPIDController.setP(kP);
        leftPIDController.setI(kI);
        leftPIDController.setD(kD);
        leftPIDController.setIZone(kIz);
        leftPIDController.setFF(kFF);
        leftPIDController.setOutputRange(kMinOutput, kMaxOutput);

        rightPIDController.setP(kP);
        rightPIDController.setI(kI);
        rightPIDController.setD(kD);
        rightPIDController.setIZone(kIz);
        rightPIDController.setFF(kFF);
        rightPIDController.setOutputRange(kMinOutput, kMaxOutput);

        reversedLimitSwitch = leftMotor.getReverseLimitSwitch(Type.kNormallyOpen);
        reversedLimitSwitch.enableLimitSwitch(true);

        rightMotor.setIdleMode(IdleMode.kBrake);
        leftMotor.setIdleMode(IdleMode.kBrake);

        rightMotor.burnFlash();
        leftMotor.burnFlash();

        // leftEncoder.setPositionFactor(M_PI * 3/4);


        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
 
    @Override
    public void periodic() {

        SmartDashboard.putBoolean("LeftLimSwitch", leftLimitSwitch());
        SmartDashboard.putNumber("Left Motor Position", leftEncoder.getPosition());
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    // measure wheel distance per rotation

    // private void setElevatorRefrences(double setHeight) {
    //     leftPIDController.setReference(setHeight, CANSparkMax.ControlType.kPosition);
    //     rightPIDController.setReference(setHeight, CANSparkMax.ControlType.kPosition);
    // }

    // public void setElevatorHeight(double newHeight) {
    //     if (newHeight >= elevatorMaxHeight) {
    //         setElevatorRefrences(elevatorMaxHeight);
    //     } else if (newHeight >= height) {
    //         setElevatorRefrences(newHeight - height);
    //     } else {
    //         setElevatorRefrences(height - newHeight);
    //     }

    // }

    public void topElevator(){
        rightPIDController.setReference(ElevatorConstants.topPIDReference, ControlType.kPosition);
        leftPIDController.setReference(ElevatorConstants.topPIDReference, ControlType.kPosition);

        //is it height that is being set to ElevatorConstants.topPIDReference or like our actual setpoint?

        setPoint = ElevatorConstants.topPIDReference;
    }

    public void bottomElevator(){
        rightPIDController.setReference(ElevatorConstants.bottomPIDReference, ControlType.kPosition);
        leftPIDController.setReference(ElevatorConstants.bottomPIDReference, ControlType.kPosition);

        setPoint = ElevatorConstants.bottomPIDReference;

        //is it height that is being set to ElevatorConstants.bottomPIDReference or like our actual setpoint?
    }

    public void setAscendSpeed(){
        MotorControllerGroup.set(ElevatorConstants.ascensionSpeed);
    }

    public void setDescendSpeed(){
        MotorControllerGroup.set(ElevatorConstants.descensionSpeed);
    }

    public void stopElevator(){
       MotorControllerGroup.set(ElevatorConstants.stopSpeed);
    }

    public boolean rightLimitSwitch(){
        return reversedLimitSwitch.isPressed();
    }

    public boolean leftLimitSwitch(){
        return reversedLimitSwitch.isPressed();
    }

    public boolean isAtSetPoint(){
        return Math.abs(setPoint - leftEncoder.getPosition()) <= ElevatorConstants.leftPIDTolerance 
        && Math.abs(setPoint - rightEncoder.getPosition()) <= ElevatorConstants.rightPIDTolerance;
    }

    public void setHome(){
        leftEncoder.setPosition(0.0);
        rightEncoder.setPosition(0.0);
    }



}