// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.RelativeEncoder;

import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Chassis extends SubsystemBase {

    private final CANSparkMax kLeftFrontController;
    private final CANSparkMax kRightFrontController;
    private final CANSparkMax kLeftRearController;
    private final CANSparkMax kRightRearController;

    private final RelativeEncoder kLeftFrontEncoder;
    private final RelativeEncoder kRightFrontEncoder;

    // set CANId's for the front and rear of both left and right moters

    // private instance variables for the left and right motor controller groups

    private final MotorControllerGroup kLefMotorControllerGroup;
    private final MotorControllerGroup kRightControllerGroup;

    // private final RelativeEncoder kLeftFrontEncoder;
    // private final RelativeEncoder kRightFrontEncoder;

    // commeted out the encoders for the time being

    private final DifferentialDrive kDifferentialDrive;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Chassis() {

        // creating the left front and rear Controllers
        kLeftFrontController = new CANSparkMax(1, MotorType.kBrushless);
        kLeftRearController = new CANSparkMax(2, MotorType.kBrushless);

        // creating the right front and rear controllers
        kRightFrontController = new CANSparkMax(3, MotorType.kBrushless);
        kRightRearController = new CANSparkMax(4, MotorType.kBrushless);

        kLefMotorControllerGroup = new MotorControllerGroup(kLeftFrontController, kLeftRearController);

        kRightControllerGroup = new MotorControllerGroup(kRightFrontController, kRightRearController);

        kDifferentialDrive = new DifferentialDrive(kLefMotorControllerGroup, kRightControllerGroup);

        // the left and right groups are setted to differential drive

        kLeftFrontEncoder = kLeftFrontController.getEncoder();
        kRightFrontEncoder = kRightFrontController.getEncoder();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        SmartDashboard.putNumber(
                "Left front encoder velocity: ",
                kLeftFrontEncoder.getVelocity());
        SmartDashboard.putNumber(
                "Right front encoder velocity: ",
                kRightFrontEncoder.getVelocity());
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {

    }

    // public void arcadeDrive(double xSpeed, double zRotation) {
    //     kDifferentialDrive.arcadeDrive(xSpeed, zRotation);
    //     // This method will be called once per scheduler run when in simulation

    // }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void setTankPower(double d, double u){
        kDifferentialDrive.tankDrive(d, u);
    }

}
