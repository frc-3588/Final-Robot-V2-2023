// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import javax.swing.text.Position;

import com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ArmConstants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Arm extends SubsystemBase {
    private CANSparkMax motor;
    private static final int deviceID = 6;

    private SparkMaxPIDController PIDController;

    private double kP = 1.000000;
    private double kI = 0.005000;
    private double kD = 0.000001;
    private double kIz = 0.000001;
    private double kFF = 0;
    private double kMaxOutput = 1;
    private double kMinOutput = -1;

    private double rotations = 0;

    private RelativeEncoder encoder; // arm needs two set points at which it extends, highest score placing area and
                                     // middle

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SORCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Arm() {
        motor = new CANSparkMax(deviceID, MotorType.kBrushless);
        motor.restoreFactoryDefaults();

        PIDController = motor.getPIDController();

        encoder = motor.getEncoder();

        encoder.setPosition(0.0);

        PIDController.setP(kP);

        PIDController.setI(kI);
        PIDController.setD(kD);
        PIDController.setIZone(kIz);
        PIDController.setFF(kFF);
        PIDController.setOutputRange(kMinOutput, kMaxOutput);

        // SmartDashboard.putNumber("Set Rotations", rotations);

        // reversedLimitSwitch = motor.getReverseLimitSwitch(Type.kNormallyOpen);
        // reversedLimitSwitch.enableLimitSwitch(true);

        // motor.setIdleMode(IdleMode.kBrake);
        // motor.burnFlash();

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // SmartDashboard.putNumber("Set Arm Rotations", rotations);
        SmartDashboard.putNumber("Arm P Gain", kP);
        SmartDashboard.putNumber("Arm I Gain", kI);
        SmartDashboard.putNumber("Arm D Gain", kD);
        SmartDashboard.putNumber("Arm I Zone", kIz);
        SmartDashboard.putNumber("Arm Feed Forward", kFF);
        SmartDashboard.putNumber("Arm Max Output", kMaxOutput);
        SmartDashboard.putNumber("Arm Min Output", kMinOutput);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putNumber("Arm Rotations Graph", encoder.getPosition());
        SmartDashboard.putNumber("Arm Rotations", encoder.getPosition());

        double p = SmartDashboard.getNumber("Arm P Gain", 0);
        double i = SmartDashboard.getNumber("Arm I Gain", 0);
        double d = SmartDashboard.getNumber("Arm D Gain", 0);
        double iz = SmartDashboard.getNumber("Arm I Zone", 0);
        double ff = SmartDashboard.getNumber("Arm Feed Forward", 0);
        double max = SmartDashboard.getNumber("Arm Max Output", 0);
        double min = SmartDashboard.getNumber("Arm Min Output", 0);
        // if PID coefficients on SmartDashboard have changed, write new values to
        // controller
        if ((p != kP)) {
            PIDController.setP(p);
            kP = p;
        }
        if ((i != kI)) {
            PIDController.setI(i);
            kI = i;
        }
        if ((d != kD)) {
            PIDController.setD(d);
            kD = d;
        }
        if ((iz != kIz)) {
            PIDController.setIZone(iz);
            kIz = iz;
        }
        if ((ff != kFF)) {
            PIDController.setFF(ff);
            kFF = ff;
        }
        if ((max != kMaxOutput) || (min != kMinOutput)) {
            PIDController.setOutputRange(min, max);
            kMinOutput = min;
            kMaxOutput = max;
        }

        // rotations = SmartDashboard.getNumber("Set Arm Rotations", 0);

        // PIDController.setReference(rotations, ControlType.kPosition);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isInPosition(double position) {

        double range = 10;

        return Math.abs(position - encoder.getPosition()) <= range;
    }

    // public void runArm(int setPoint) {
    // System.out.println("Running Arm");

    // PIDController.setReference(setPoint, CANSparkMax.ControlType.kPosition);
    // }

    public void topArm() {
        System.out.println("Running Arm: top");
        PIDController.setReference(ArmConstants.topPIDReference, ControlType.kPosition);

    }

    public void middleArm() {
        System.out.println("Running Arm: middle");
        PIDController.setReference(ArmConstants.middlePIDReference, ControlType.kPosition);
    }

    public void armBottom() {
        PIDController.setReference(0, ControlType.kPosition);
    }

    public void stopArm() {
        // motor.stopMotor();
    }

}