// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import javax.swing.text.Position;

import com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ArmConstants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Arm extends SubsystemBase {
    private CANSparkMax leftArmMotor;
    private CANSparkMax rightArmMotor;
    private static final int leftDeviceID = 8;
    private static final int rightDeviceID = 10;

    private SparkMaxPIDController leftPIDController;
    private SparkMaxPIDController rightPIDController;

    private final double kP = 5e-5;
    private final double kI = 1e-6;
    private final double kD = 0;
    private final double kIz = 0;
    private final double kFF = 0.000156;
    private final double kMaxOutput = 0.75;
    private final double kMinOutput = -0.75;
    private final int kMaxRPM = 5700;

    private RelativeEncoder encoder;
    private RelativeEncoder encoderRight;
    private SparkMaxLimitSwitch reversedLimitSwitch;

    public double position = 0.0;

    private double setPoint; //arm needs two set points at which it extends, highest score placing area and middle 

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SORCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Arm() {
        leftArmMotor = new CANSparkMax(leftDeviceID, MotorType.kBrushless);
        leftArmMotor.restoreFactoryDefaults();
        rightArmMotor = new CANSparkMax(rightDeviceID, MotorType.kBrushless);
        rightArmMotor.restoreFactoryDefaults();

        leftPIDController = leftArmMotor.getPIDController();
        rightPIDController = leftArmMotor.getPIDController();

        encoder = leftArmMotor.getEncoder();
        encoderRight = rightArmMotor.getEncoder();

        leftPIDController.setP(kP);
        leftPIDController.setI(kI);
        leftPIDController.setD(kD);
        leftPIDController.setIZone(kIz);
        leftPIDController.setFF(kFF);
        leftPIDController.setOutputRange(kMinOutput, kMaxOutput);
        
        rightPIDController.setP(-kP);
        rightPIDController.setI(-kI);
        rightPIDController.setD(-kD);
        rightPIDController.setIZone(-kIz);
        rightPIDController.setFF(-kFF);
        rightPIDController.setOutputRange(-kMinOutput, -kMaxOutput);
        // reversedLimitSwitch = motor.getReverseLimitSwitch(Type.kNormallyOpen);
        // reversedLimitSwitch.enableLimitSwitch(true);

        leftArmMotor.setIdleMode(IdleMode.kBrake);
        rightArmMotor.setIdleMode(IdleMode.kBrake);
        // motor.burnFlash(); //double check that this isn't destroying the sparkmax, at rev

        SmartDashboard.putNumber("Arm Position", position);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROB,OTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // SmartDashboard.putNumber("Set Arm Rotations", rotations);
        SmartDashboard.putNumber("Arm P Gain", kP);
        SmartDashboard.putNumber("Arm I Gain", kI);
        SmartDashboard.putNumber("Arm D Gain", kD);
        SmartDashboard.putNumber("Arm I Zone", kIz);
        SmartDashboard.putNumber("Arm Feed Forward", kFF);
        SmartDashboard.putNumber("Arm Max Output", kMaxOutput);
        SmartDashboard.putNumber("Arm Min Output", kMinOutput);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        double newPosition = SmartDashboard.getNumber("Arm Position", 0.0);

        if (newPosition != position){
            position = newPosition;
            leftPIDController.setReference(position, ControlType.kPosition);
            rightPIDController.setReference(position, ControlType.kPosition);
        }
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isInPosition(double position) {

        double range = 10;

        return Math.abs(position - encoder.getPosition()) <= range;
    }

    // public void runArm(int setPoint) {
    // System.out.println("Running Arm");

    // PIDController.setReference(setPoint, CANSparkMax.ControlType.kPosition);
    // }

    public void topArm() {
        System.out.println("Running Arm: top");
        leftPIDController.setReference(ArmConstants.topPIDReference, ControlType.kPosition);
        rightPIDController.setReference(ArmConstants.topPIDReference, ControlType.kPosition);

    }

    public void middleArm() {
        System.out.println("Running Arm: middle");
        leftPIDController.setReference(ArmConstants.middlePIDReference, ControlType.kPosition);
        rightPIDController.setReference(ArmConstants.middlePIDReference, ControlType.kPosition);
        setPoint = ArmConstants.middlePIDReference;
    }

    public void stopArm(){
        leftArmMotor.stopMotor();
        rightArmMotor.stopMotor();
    }

    public void setHome(){
        encoder.setPosition(0.0);
    }

    public boolean isAtSetPoint(){
        return Math.abs(setPoint - encoder.getPosition()) <= ArmConstants.PIDTolerance;
    }
    public void setArmPower(double power) {
        leftArmMotor.set(power);
        rightArmMotor.set(-power);
    }

    
}