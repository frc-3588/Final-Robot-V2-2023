// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import javax.swing.text.Position;

import com.fasterxml.jackson.databind.AnnotationIntrospector.ReferenceProperty.Type;
import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.SparkMaxLimitSwitch;
import com.revrobotics.SparkMaxPIDController;
import com.revrobotics.CANSparkMax.ControlType;
import com.revrobotics.CANSparkMax.IdleMode;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;

import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants.ArmConstants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Arm extends SubsystemBase {
    private CANSparkMax leftArmMotor;
    private CANSparkMax rightArmMotor;
    // private static final int leftDeviceID = 8;
    // private static final int rightDeviceID = 10;

    private SparkMaxPIDController leftPIDController;
    private SparkMaxPIDController rightPIDController;

    private final double kP = 0.400000;
    private final double kI = 0.000000;
    private final double kD = 0.000010;
    private final double kIz = 0.00000;
    private final double kFF = 0.000156;
    private final double kMaxOutput = 0.75;
    private final double kMinOutput = -0.75;
    // private final int kMaxRPM = 5700;

    private RelativeEncoder leftEncoder;
    private RelativeEncoder rightEncoder;
    private SparkMaxLimitSwitch reversedLimitSwitch;

    public double position = 0.0; //used for smartDashboard

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SORCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public Arm() {
        leftArmMotor = new CANSparkMax(8, MotorType.kBrushless);
        leftArmMotor.restoreFactoryDefaults();
        rightArmMotor = new CANSparkMax(10, MotorType.kBrushless);
        rightArmMotor.restoreFactoryDefaults();

        leftPIDController = leftArmMotor.getPIDController();
        rightPIDController = rightArmMotor.getPIDController();

        rightArmMotor.setInverted(true);


        leftEncoder = leftArmMotor.getEncoder();
        rightEncoder = rightArmMotor.getEncoder();

        leftEncoder.setPosition(0.0);
        rightEncoder.setPosition(0.0);

        leftPIDController.setP(kP);
        leftPIDController.setI(kI);
        leftPIDController.setD(kD);
        leftPIDController.setIZone(kIz);
        leftPIDController.setFF(kFF);
        leftPIDController.setOutputRange(kMinOutput, kMaxOutput);
        
        rightPIDController.setP(kP);
        rightPIDController.setI(kI);
        rightPIDController.setD(kD);
        rightPIDController.setIZone(kIz);
        rightPIDController.setFF(kFF);
        rightPIDController.setOutputRange(kMinOutput, kMaxOutput);

        // reversedLimitSwitch = motor.getReverseLimitSwitch(Type.kNormallyOpen);
        // reversedLimitSwitch.enableLimitSwitch(true);

        // leftArmMotor.setIdleMode(IdleMode.kBrake);
        rightArmMotor.setIdleMode(IdleMode.kBrake);
        // motor.burnFlash(); //double check that this isn't destroying the sparkmax, at rev

        SmartDashboard.putNumber("Arm Position", position);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROB,OTBUILDER ID=CONSTRUCTORS
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // SmartDashboard.putNumber("Set Arm Rotations", rotations);
        SmartDashboard.putNumber("Arm P Gain", kP);
        SmartDashboard.putNumber("Arm I Gain", kI);
        SmartDashboard.putNumber("Arm D Gain", kD);
        SmartDashboard.putNumber("Arm I Zone", kIz);
        SmartDashboard.putNumber("Arm Feed Forward", kFF);
        SmartDashboard.putNumber("Arm Max Output", kMaxOutput);
        SmartDashboard.putNumber("Arm Min Output", kMinOutput);
    }

    @Override
    public void periodic() {
        // double p = SmartDashboard.getNumber("Arm P Gain", 0);
        // double i = SmartDashboard.getNumber("Arm I Gain", 0);
        // double d = SmartDashboard.getNumber("Arm D Gain", 0);
        // double iz = SmartDashboard.getNumber("Arm I Zone", 0);
        // double ff = SmartDashboard.getNumber("Arm Feed Forward", 0);
        // double max = SmartDashboard.getNumber("Arm Max Output", 0);
        // double min = SmartDashboard.getNumber("Arm Min Output", 0);


        // This method will be called once per scheduler run
        // double newPosition = SmartDashboard.getNumber("Arm Position", 0.0);

        // if (newPosition != position){
        //     position = newPosition;
        //     // leftPIDController.setReference(position, ControlType.kPosition);
        //     rightPIDController.setReference(position, ControlType.kPosition);
        // }


        // if((p != kP)){
        //     leftPIDController.setP(p);
        //     rightPIDController.setP(p);

        //     kP = p;
        // }
        // if((i != kI)){
        //     leftPIDController.setI(i);
        //     rightPIDController.setI(i);

        //     kI = i;
        // }
        // if((d != kD)){
        //     leftPIDController.setD(d);
        //     rightPIDController.setD(d);

        //     kD = d;
        // }
        // if((ff != kFF)){
        //     leftPIDController.setFF(ff);
        //     rightPIDController.setFF(ff);

        //     kFF = ff;
        // }
        // if((iz != kIz)){
        //     leftPIDController.setIZone(iz);
        //     rightPIDController.setIZone(iz);

        //     kIz = iz;
        // }

        //  if((max != kMaxOutput) || min != kMinOutput ){
        //     // leftPIDController.setOutputRange(min, max);
        //     rightPIDController.setOutputRange(min, max);

        //     kMinOutput = min;
        //     kMaxOutput = max;
        //  }

         SmartDashboard.putNumber("Left Arm Rotations Graph", leftEncoder.getPosition());
         SmartDashboard.putNumber("Left Arm Rotations", leftEncoder.getPosition());

         SmartDashboard.putNumber("Right Arm Rotations Graph", rightEncoder.getPosition());
         SmartDashboard.putNumber("Right Arm Rotations", rightEncoder.getPosition());

        //  position = SmartDashboard.getNumber("Arm Rotations", position);
        //  leftPIDController.setReference(position, ControlType.kPosition);
        //  rightPIDController.setReference(position, ControlType.kPosition);
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation


    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public boolean isInPosition(double position) {

        double range = 10;

        return Math.abs(position - leftEncoder.getPosition()) <= range;
    }

    public void topArm() {
        System.out.println("Running Arm: middle");
        leftPIDController.setReference(ArmConstants.topPIDReference, ControlType.kPosition);
        rightPIDController.setReference(ArmConstants.topPIDReference, ControlType.kPosition);
    }

    public void middleArm() {
        System.out.println("Running Arm: middle");
        leftPIDController.setReference(ArmConstants.middlePIDReference, ControlType.kPosition);
        rightPIDController.setReference(ArmConstants.middlePIDReference, ControlType.kPosition);
    }

    public void stopArm(){
        leftArmMotor.stopMotor();
        rightArmMotor.stopMotor();
    }

    public void setHome(){
        leftPIDController.setReference(ArmConstants.setHome, ControlType.kPosition);
        rightPIDController.setReference(ArmConstants.setHome, ControlType.kPosition);
    }

    public boolean isAtSetPoint(double setpoint){
        return Math.abs(setpoint - leftEncoder.getPosition()) <= ArmConstants.PIDTolerance ||
        Math.abs(setpoint - rightEncoder.getPosition()) <= ArmConstants.PIDTolerance;
    }

    public void setArmPower(double power) {
        leftArmMotor.set(power);
        rightArmMotor.set(power);
    }

    
}
